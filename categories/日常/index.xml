<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>日常 on 打工人日志</title>
    <link>https://www.jobcher.com/categories/%E6%97%A5%E5%B8%B8.html</link>
    <description>Recent content in 日常 on 打工人日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.jobcher.com/categories/%E6%97%A5%E5%B8%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>黑群晖最新安装教程</title>
      <link>https://www.jobcher.com/%E9%BB%91%E7%BE%A4%E6%99%96%E6%9C%80%E6%96%B0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E9%BB%91%E7%BE%A4%E6%99%96%E6%9C%80%E6%96%B0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html</guid>
      <description>黑群晖最新安装教程 我这里拿蜗牛星际举例讲解，如何安装群晖最新引导文件，如何正常使用黑群晖。
准备 黑群晖设备一台 电源线 hdmi 或者其他视频线 有线鼠标 有线键盘 显示器 8g 以上U盘 一块1T以上硬盘 开始安装 1. 制作U盘启动器 下载 大白菜U盘制作器 https://www.dabaicai.com/
1、打开大白菜超级U盘装机工具，点击主界面的【U盘启动】模块，然后选择【默认模式】。
2、在【请选择】后面选择需要制作启动的设备（插入的USB设备，一般会默认读取该设备）。
3、模式选择【USB-HDD】，格式选择【NTFS】，然后点击【一键制作USB启动盘】。
4、在点击一键制作后会弹出一个关于【U盘数据删除且不可恢复】的窗口，选择【是】。
2. 引导文件复制 开始前先拔掉前面4个盘位的硬盘，以防写错盘导致数据丢失。
1、载写盘软件和群晖引导文件，然后二个文件复制到U盘上
引导文件下载链接: https://pan.baidu.com/s/1F-Mva0AuEehUNk4q19QyxA
提取码: amf3
复制到U盘!
3. U盘启动黑群晖，写入文件 开始前先拔掉前面4个盘位的硬盘，以防写错盘导致数据丢失。
1、大白菜U盘启动,插上U盘开机自检页面 按F11或F7（根据机型不同快捷按键不同），选U盘启动
2、桌面找到 分区工具DiskGenius
3、点选 第一个硬盘 即便是内置的16G硬盘，右键选删除所有分区
4、保存更改
5、删除分区完毕后 打开此电脑 找 默认的第一个分区里面的写盘工具
6、选择写盘工具软件 打开
7、全部保存默认参数，只需要找到群晖引导文件 打开
8、找到U盘上的群晖引导文件IMG，然后点 右下角的Start 按钮开始写入
写入完毕的 提示，此时就写入完成了，拔掉U盘重启系统即可。
4. 重启设备后安装DSM系统 这里为了保证系统稳定性，使用DSM6.2.3系统，我们这边使用DS918+4盘符
1、下载群晖助手软件和系统文件
Synology Assistant: https://cndl.synology.cn/download/Utility/Assistant/7.0.4-50051/Windows/synology-assistant-7.0.4-50051.exe?model=DS918%2B&amp;amp;bays=4&amp;amp;dsm_version=6.2.4&amp;amp;build_number=25556
2、DSM6.2.3系统：https://pan.baidu.com/s/15CYI12-P1GcdLOa-FqNWrA
提取码: riub
2、安装群晖助手软件：在同一网段内的电脑上安装群晖助手软件
3、打开群晖助手搜索到IP,如果要在线安装系统 就选联机 如果本地安装系统就选 安装</description>
    </item>
    
    <item>
      <title>推荐一下 容器云资源</title>
      <link>https://www.jobcher.com/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%8B-%E5%AE%B9%E5%99%A8%E4%BA%91%E8%B5%84%E6%BA%90.html</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%8B-%E5%AE%B9%E5%99%A8%E4%BA%91%E8%B5%84%E6%BA%90.html</guid>
      <description>背景 很多同学在开发软件和测试软件的早期，都会遇到一个问题：如何快速的搭建一个测试环境。这个问题在开发软件的早期是非常棘手的，因为开发软件的早期，往往是没有任何的资源的。这个时候，我们就需要借助一些云资源来帮助我们快速的搭建一个测试环境。接下我会推荐一些云资源，希望能够帮助到大家。
推荐 1.vercel vercel是一个提供托管服务的网站，它可以帮助我们快速的部署一个静态网站。它的优点是：免费、快速、简单。它的缺点是：只能部署静态网站。如果你的项目是一个静态网站，那么我强烈推荐你使用vercel。
2。zeabur zeabur是一个帮助开发者一键部署自己的服务的平台，免费方案限制1个项目数量，1vCPU,内存512M，存储1GB 适合做文档和个人博客
3.腾讯云 国内的良心云，但是现在也不太良心了，不太推荐了，毕竟没什么福利了，如果你是学生的话可以考虑买他们的轻量云来部署他们的服务
总结 我随便推荐一下，建议大家可以先试用一下1和2的方案，希望能够帮助到大家，如果你有更好的推荐，欢迎在评论区留言。</description>
    </item>
    
    <item>
      <title>如何礼貌回绝不合理的需求</title>
      <link>https://www.jobcher.com/%E5%A6%82%E4%BD%95%E7%A4%BC%E8%B2%8C%E5%9B%9E%E7%BB%9D%E4%B8%8D%E5%90%88%E7%90%86%E7%9A%84%E9%9C%80%E6%B1%82.html</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E5%A6%82%E4%BD%95%E7%A4%BC%E8%B2%8C%E5%9B%9E%E7%BB%9D%E4%B8%8D%E5%90%88%E7%90%86%E7%9A%84%E9%9C%80%E6%B1%82.html</guid>
      <description>背景 最近在做一个项目，项目的需求是这样的： spring-cloud有一个服务A，服务A有一个接口，接口的功能是根据传入的参数，返回一个字符串。但是服务响应非常的慢，大概需要4秒左右。这个响应速度是不能忍受的！但是这个服务的开发强行说要上线。我们有几个选项：
1.不上线，但是这个服务的开发无法按期交付 2.上线，但是这个服务的响应速度太慢了，运维背锅 3.劝说服务的开发，让他们优化接口的响应速度
相信大家都会选择第3个选择，那我们站在运维的角度如何劝说服务的开发呢？ 劝说 故障级联（Cascading Failures）：连接超时的服务可能会导致其他服务出现故障级联效应。这是因为微服务系统中的服务通常会相互调用和依赖。当一个服务连接超时时，其他依赖该服务的服务可能无法及时获取所需的数据或执行必要的操作，从而导致它们自身出现故障。
响应时间延迟（Increased Response Time）：如果一个服务连接超时，它的调用方可能需要等待更长的时间来获取响应或超时处理。这会增加整个系统的响应时间，因为其他服务的请求也需要等待超时的服务返回结果。这可能会导致用户体验下降，甚至可能导致其他服务的性能问题。
资源耗尽（Resource Exhaustion）：连接超时可能会导致调用方服务的资源耗尽。当一个服务长时间等待连接超时的服务时，它可能会保持与该服务的连接打开，消耗额外的内存和网络资源。这可能导致调用方服务的资源不足，无法为其他请求提供充足的资源，进而影响整个系统的性能。
重试和失败处理（Retry and Failure Handling）：当一个服务连接超时时，调用方服务通常会尝试重新连接或执行其他失败处理机制。这可能导致调用方服务增加额外的负载，因为它需要多次尝试连接超时的服务。同时，如果没有适当的失败处理机制，连接超时的服务可能无法正确处理重试请求，导致进一步的问题。
结论 综上所述，连接超时的服务对Spring Cloud微服务系统可能会带来级联故障、响应时间延迟、资源耗尽、重试和失败处理的问题，并增加监控和故障排除的成本。因此，及时发现和解决连接超时问题对于确保系统的稳定性和性能至关重要。希望领导能够听取意见，不要让运维背锅。</description>
    </item>
    
    <item>
      <title>github 国内代理访问下载</title>
      <link>https://www.jobcher.com/github-%E5%9B%BD%E5%86%85%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E4%B8%8B%E8%BD%BD.html</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/github-%E5%9B%BD%E5%86%85%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E4%B8%8B%E8%BD%BD.html</guid>
      <description>演示代理 前缀 https://github.jobcher.com/gh/ 下载仓库 git clone https://github.jobcher.com/gh/&amp;lt;你要下载的GitHub地址&amp;gt; #例子 git clone https://github.jobcher.com/gh/https://github.com/jobcher/blog.git 部署 复制js到cloudflare worker
&amp;#39;use strict&amp;#39; /** * static files (404.html, sw.js, conf.js) */ const ASSET_URL = &amp;#39;https://jobcher.github.io/&amp;#39; // 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &amp;#39;/gh/&amp;#39;，注意，少一个杠都会错！ const PREFIX = &amp;#39;/gh/&amp;#39; // 分支文件使用jsDelivr镜像的开关，0为关闭，默认关闭 const Config = { jsdelivr: 0 } const whiteList = [] // 白名单，路径里面有包含字符的才会通过，e.g. [&amp;#39;/username/&amp;#39;] /** @type {RequestInit} */ const PREFLIGHT_INIT = { status: 204, headers: new Headers({ &amp;#39;access-control-allow-origin&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;access-control-allow-methods&amp;#39;: &amp;#39;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&amp;#39;, &amp;#39;access-control-max-age&amp;#39;: &amp;#39;1728000&amp;#39;, }), } const exp1 = /^(?</description>
    </item>
    
    <item>
      <title>逆境和成长-2022年终总结</title>
      <link>https://www.jobcher.com/%E9%80%86%E5%A2%83%E5%92%8C%E6%88%90%E9%95%BF-2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E9%80%86%E5%A2%83%E5%92%8C%E6%88%90%E9%95%BF-2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html</guid>
      <description> 转眼间来到了 2022 年的尾声，2022 年不仅仅对于世界来说，还是对于我个人来说都是意义非凡的一年。
逆境和成长 2022 年初在中国大陆仍然实行着最为严格的清零政策并愈演愈烈，城市居民被限制人身自由，就连农村地区也被大量要求居家隔离，严重损害了中国经济和社会活力。中国失业人口再创新高，大量的毕业生找不到工作。在美国，最为严重的通货膨胀席卷全国，高昂的加息政策，损害了底层人民和工薪阶层。在中东，塔利班武装重新占领阿富汗，重新实行政教合一的暴力统治。在俄罗斯，爆发了乌克兰战争，将俄罗斯真正从苏联的阴影中脱离出来。在世界各地发生了太多的变化，2022 年注定是要被载入史册的一年。
对于我个人来说，2022 年也是成长非常大的一年，我经历了自工作来最大的变化，我从一家工作了多年的企业毕业，再次进入了社会的试炼场中求职，接触了更多的人，碰到了更多的事，也有了更多的感悟。曾经的我会讲工作看的比一切都重要，通过勤奋和努力可以改变一切，但是，社会的规则并不是这样的。决定你的个人价值并不是这些外在的东西，决定你个人价值的是你自己对自己的看法。你认为自己有价值，你就是你能够做到有价值。你觉得自己不重要，别人自然觉得你不重要。
在 🆕 的 2023 年，希望世界和平，人人幸福，愿生活在苦难中的人们，能够早日远离苦难，让幸福来敲门……
欢迎关注我的博客[www.jobcher.com](https://www.jobcher.com/) </description>
    </item>
    
    <item>
      <title>优雅的使用Conda管理python环境</title>
      <link>https://www.jobcher.com/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8conda%E7%AE%A1%E7%90%86python%E7%8E%AF%E5%A2%83.html</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8conda%E7%AE%A1%E7%90%86python%E7%8E%AF%E5%A2%83.html</guid>
      <description>背景 很多时候,避免不了同时使用 python2 和 python3 的环境,也避免不了不同的工作所需要不同版本的库文件,比如在想用 TensorFlow 较早版本的同时;还想运行 Pytorch 最新版；还想顺便学习 Nao 机器人编程,学习 Django 后台,这个时候,一款非常好用的包管理工具就显得十分重要了,这就是我写这篇博客的原因,这篇博客将会讲解：
如何安装 conda; 如何更换 conda 的下载源; 如何使用 canda; 安装 conda 在安装时这两个选项需要点上：
更换 conda 的下载源 Conda官方的下载源太慢了,而且经常会出现 HTTPERROR 之类的错误,如果想要用 Conda 愉快的创建不同工作环境,愉快的下载安装各种库,那么换下载源是必不可少的
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ conda config --set show_channel_urls yes # 设置搜索时显示通道地址 具体操作同时按 Win+R 键打开运行窗口,输入 cmd,回车：
将上面的命令全部复制,到命令行里单击右键就会自动执行复制的命令,添加清华源
使用 conda 查看环境
conda info -e conda info --envs 创建环境
conda create -n name python=3.</description>
    </item>
    
    <item>
      <title>shell功能脚本集合</title>
      <link>https://www.jobcher.com/shell%E5%8A%9F%E8%83%BD%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88.html</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/shell%E5%8A%9F%E8%83%BD%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88.html</guid>
      <description>28 合 1 多功能脚本 脚本说明: 多合一脚本，DD 系统，BBR，xray,TG 搭建等等·常用的各种脚本基本都有！ 系统支持: CentOS6+ / Debian6+ / Ubuntu14+ 支持安装 BBR，搭建 KCPtun，ssr 多用户版 安装 V2ary，Tg 专用代理（Go 版），安装 Goflyway 小鸡性能测试，回程线路测试，云监控 傻瓜式一键 DD 包 一键开启默认 bbr Netflix 解锁检测 xray 安装 宝塔面板，闲蛋面板，x-ui 面板，WARP 一键配置 脚本特点: 目前网上的各个一键脚本基本都是只有 安装/启动/重启 等基础功能，对于小白来说还是不够简单方便。常用的各种脚本基本都有！
下载安装: bash &amp;lt;(curl -s -L https://git.io/JPj82) gfw_push 一键安装 脚本说明: 监测服务器 IP 是否被墙并推送至 Telegram 一键脚本 系统支持: CentOS6+ / Debian6+ / Ubuntu14+ 下载安装: bash &amp;lt;(curl -s -L git.io/JPjzm) 服务器测速 脚本说明: 服务器一键测速脚本 系统支持: CentOS7 / Debian7+ / Ubuntu14+ 下载安装: bash &amp;lt;(curl -s -L git.</description>
    </item>
    
    <item>
      <title>Cloudflare Zero Trust 内网穿透</title>
      <link>https://www.jobcher.com/cloudflare-zero-trust-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/cloudflare-zero-trust-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</guid>
      <description>Cloudflare Zero Trust 内网穿透 最快的 Zero Trust 应用访问和互联网浏览平台
增加可见性，消除复杂性，降低远程和办公室用户的风险。杜绝数据丢失、恶意软件和网络钓鱼，保护用户、应用程序和设备安全。
使用 Tunnel 隧道来实现内网传统，实现内网访问各类应用
安装部署 https://dash.teams.cloudflare.com/
Docker 部署 在 docker 环境运行 &amp;lt;token&amp;gt; 是你个人令牌
docker run -d --name cloudflared cloudflare/cloudflared:latest tunnel --no-autoupdate run --token &amp;lt;token&amp;gt; Linux 部署 X86-64 位 curl -L --output cloudflared.rpm https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-x86_64.rpm &amp;amp;&amp;amp; \ sudo yum localinstall -y cloudflared.rpm &amp;amp;&amp;amp; \ sudo cloudflared service install &amp;lt;token&amp;gt; X86-32 位 curl -L --output cloudflared.rpm https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386.rpm &amp;amp;&amp;amp; sudo yum localinstall -y cloudflared.rpm &amp;amp;&amp;amp; sudo cloudflared service install &amp;lt;token&amp;gt; arm64 curl -L --output cloudflared.</description>
    </item>
    
    <item>
      <title>headscale 部署使用</title>
      <link>https://www.jobcher.com/headscale-%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8.html</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/headscale-%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8.html</guid>
      <description>Headscale Tailscale 的控制服务器是不开源的，而且对免费用户有诸多限制，这是人家的摇钱树，可以理解。好在目前有一款开源的实现叫 Headscale，这也是唯一的一款，希望能发展壮大。
Headscale 由欧洲航天局的 Juan Font 使用 Go 语言开发，在 BSD 许可下发布，实现了 Tailscale 控制服务器的所有主要功能，可以部署在企业内部，没有任何设备数量的限制，且所有的网络流量都由自己控制。
Headscale 部署 我决定使用docker-compose进行部署
创建存储 #!/bin/bash mkdir -p /opt/headscale mkdir -p ./config touch ./config/db.sqlite curl https://raw.githubusercontent.com/juanfont/headscale/main/config-example.yaml -o ./config/config.yaml 运行 docker-compose 文件 创建 docker-compose.yaml
version: &amp;#34;3&amp;#34; services: headscale: image: headscale/headscale:latest volumes: - ./config:/etc/headscale/ - ./data:/var/lib/headscale ports: - 8080:8080 - 9090:9090 - 50443:50443 command: headscale serve restart: unless-stopped 运行
docker-compose up -d
Headscale 使用 Linux 使用 wget https://pkgs.tailscale.com/stable/tailscale_1.22.2_amd64.tgz 解压</description>
    </item>
    
    <item>
      <title>羊了个羊小程序 破解通关</title>
      <link>https://www.jobcher.com/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%A0%B4%E8%A7%A3%E9%80%9A%E5%85%B3.html</link>
      <pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%A0%B4%E8%A7%A3%E9%80%9A%E5%85%B3.html</guid>
      <description>注意此教程需要通过电脑端完成
操作步骤 1、微信打开羊了个羊小程序，玩第一关 2、进入当前登录的微信数据文件夹 微信左下角 -&amp;gt; 设置 -&amp;gt; 文件管理 -&amp;gt; 打开文件夹
打开后进入当前登录的微信数据文件夹
3、进入当前登录微信数据文件夹后，依次进入 \Applet\wx141bfb9b73c970a9\usr\gamecaches\resources
注意 wx141bfb9b73c970a9 文件名可能不同，但以 a9 结尾
4、修改游戏配置文件 在此文件夹下，有很多 json 文件，找到默认排序的第三个，大小 2k 的文件
我的电脑是 16632884479734.json 文件，用记事本打开，清空里面内容，将 new.txt 文件中的代码复制进此 json 文件，保存关闭
[1,0,0,[[&amp;#34;cc.JsonAsset&amp;#34;,[&amp;#34;_name&amp;#34;,&amp;#34;json&amp;#34;],1]],[[0,0,1,3]],[[0,&amp;#34;levelConfigData&amp;#34;,{&amp;#34;dailyLevel&amp;#34;:[[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001],[80001,80001]],&amp;#34;topicLevel&amp;#34;:[[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017],[10017,10017]]}]],0,0,[],[],[]] 之后打开游戏，仅需要完成 4 次第一关九宫格样式即可加入羊群！</description>
    </item>
    
    <item>
      <title>RocketMQ k8s部署 4主4从集群</title>
      <link>https://www.jobcher.com/rocketmq-k8s%E9%83%A8%E7%BD%B2-4%E4%B8%BB4%E4%BB%8E%E9%9B%86%E7%BE%A4.html</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/rocketmq-k8s%E9%83%A8%E7%BD%B2-4%E4%B8%BB4%E4%BB%8E%E9%9B%86%E7%BE%A4.html</guid>
      <description>RocketMQ k8s 部署 4 主 4 从集群 使用 NFS 配置 StatefulSet 的动态持久化存储 安装 NFS 服务端 sudo apt update sudo apt install nfs-kernel-server nfs-common 安装 NFS 客户端 所有的节点都得执行
sudo apt install nfs-common -y
创建目录 mkdir -p /data/storage/k8s/rocketmq 使用 NFS 作为StatefulSet持久化存储的操作记录，分别需要创建nfs-provisioner的rbac、storageclass、nfs-client-provisioner和statefulset的pod
创建 nfs 的 rbac --- apiVersion: v1 kind: ServiceAccount metadata: name: nfs-provisioner namespace: sanjiang --- kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1 metadata: name: nfs-provisioner-runner namespace: sanjiang rules: - apiGroups: [&amp;#34;&amp;#34;] resources: [&amp;#34;persistentvolumes&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;, &amp;#34;create&amp;#34;, &amp;#34;delete&amp;#34;] - apiGroups: [&amp;#34;&amp;#34;] resources: [&amp;#34;persistentvolumeclaims&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;, &amp;#34;update&amp;#34;] - apiGroups: [&amp;#34;storage.</description>
    </item>
    
    <item>
      <title>RocketMQ docker-compose部署 4主4从集群</title>
      <link>https://www.jobcher.com/rocketmq-docker-compose%E9%83%A8%E7%BD%B2-4%E4%B8%BB4%E4%BB%8E%E9%9B%86%E7%BE%A4.html</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/rocketmq-docker-compose%E9%83%A8%E7%BD%B2-4%E4%B8%BB4%E4%BB%8E%E9%9B%86%E7%BE%A4.html</guid>
      <description>RocketMQ docker-compose 部署 4 主 4 从集群 V 4.8.0
采用4主4从，同步模式。HA 实现上采用Master/Slave+Failover组件方式 每台主机运行三个容器，分别为NameServer、BrokerMaster、SlaveMaster，每个 Master 和 Slave 分别存放在不同的机器上
架构 IP 角色 服务 193.0.40.172 NameServer - 193.0.40.172 BrokerMaster broker-a 193.0.40.172 SlaveMaster broker-d-s 193.0.40.172 BrokerMaster broker-b 193.0.40.172 SlaveMaster broker-a-s 193.0.40.172 BrokerMaster broker-c 193.0.40.172 SlaveMaster broker-b-s 193.0.40.172 BrokerMaster broker-d 193.0.40.172 SlaveMaster broker-c-s 部署 安装 docker-compose #!/bin/bash # 下载安装 v2.4.1 docker-compose curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose docker-compose --version 执行 docker-compose --version 查看是否安装成功</description>
    </item>
    
    <item>
      <title>linux服务器 删除空间却未释放</title>
      <link>https://www.jobcher.com/linux%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%88%A0%E9%99%A4%E7%A9%BA%E9%97%B4%E5%8D%B4%E6%9C%AA%E9%87%8A%E6%94%BE.html</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/linux%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%88%A0%E9%99%A4%E7%A9%BA%E9%97%B4%E5%8D%B4%E6%9C%AA%E9%87%8A%E6%94%BE.html</guid>
      <description>linux 服务器 删除空间却未释放 在Linux或者Unix系统中，通过rm或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink)，然而如果文件是被打开的（有一个进程正在使用），那么进程将仍然可以读取该文件，磁盘空间也一直被占用，这样就会导致我们明明删除了文件，但是磁盘空间却未被释放
获取占用列表状态 lsof | grep deleted 可以看到哪些文件还被使用，未被释放空间。
释放磁盘空间 一种方法是 kill 掉相应的进程，或者停掉使用这个文件的应用，让 os 自动回收磁盘空间，当 linux 打开一个文件的时候,Linux 内核会为每一个进程在/proc/, /proc/nnnn/fd/目录（nnnn 为 pid）建立一个以其 pid 为名的目录用来保存进程的相关信息，而其子目录 fd 保存的是该进程打开的所有文件的 fd（fd：file descriptor）；
kill进程是通过截断 proc 文件系统中的文件可以强制要求系统回收分配给正在使用的的文件，这是一项高级技术，仅当管理员确定不会对运行中的进程造成影响时使用。 kill -9 12345 # PID 重启服务 lsof 命令 lsof全名list opened files，也就是列举系统中已经被打开的文件。我们都知道，linux 环境中，任何事物都是文件，设备是文件，目录是文件，甚至sockets也是文件。</description>
    </item>
    
    <item>
      <title>VSCode插件推荐=&gt; Code Runner</title>
      <link>https://www.jobcher.com/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90-code-runner.html</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90-code-runner.html</guid>
      <description>VSCode 插件推荐=&amp;gt; Code Runner Run code snippet or code file for multiple languages: C, C++, Java, JavaScript, PHP, Python, Perl, Perl 6, Ruby, Go, Lua, Groovy, PowerShell, BAT/CMD, BASH/SH, F# Script, F# (.NET Core), C# Script, C# (.NET Core), VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml Script, R, AppleScript, Elixir, Visual Basic .NET, Clojure, Haxe, Objective-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Free Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, and custom command</description>
    </item>
    
    <item>
      <title>ant build.xml 编写</title>
      <link>https://www.jobcher.com/ant-build.xml-%E7%BC%96%E5%86%99.html</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/ant-build.xml-%E7%BC%96%E5%86%99.html</guid>
      <description>ant build.xml 编写 生成 build.xml Eclipse 自动生成 Ant 的Build.xml 配置文件,生成的方法很隐蔽
选择你要生成Build.xml文件的项目,右键. Export-&amp;gt; General -&amp;gt; Ant Buildfiles .
点 Next,选择项目，再点Finish.
编写 build.xml &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; standalone=&amp;#34;no&amp;#34;?&amp;gt; &amp;lt;!-- 每个构建文件对应一个项目。&amp;lt;project&amp;gt;标签时构建文件的根标签。它可以有多个内在属性，就如代码中所示，其各个属性的含义分别如下。 (1) default表示默认的运行目标，这个属性是必须的。 (2) basedir表示项目的基准目录。 (3) name表示项目名。 (4) description表示项目的描述。 --&amp;gt; &amp;lt;project default=&amp;#34;build&amp;#34; name=&amp;#34;Sort&amp;#34;&amp;gt; &amp;lt;!-- 设置属性或文件路径，读取属性使用${property}，value路径默认项目根目录 --&amp;gt; &amp;lt;property file=&amp;#34;ant/builds.properties&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;src.dir&amp;#34; value=&amp;#34;src/statics&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;classes.dir&amp;#34; value=&amp;#34;ant/classes&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;lib.dir&amp;#34; value=&amp;#34;lib&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;dist.dir&amp;#34; value=&amp;#34;ant/dist&amp;#34; /&amp;gt; &amp;lt;!-- 定义classpath --&amp;gt; &amp;lt;path id=&amp;#34;master-classpath&amp;#34;&amp;gt; &amp;lt;fileset file=&amp;#34;${lib.dir}/*.jar&amp;#34; /&amp;gt; &amp;lt;pathelement path=&amp;#34;${classes.</description>
    </item>
    
    <item>
      <title>记录一次上门打散工</title>
      <link>https://www.jobcher.com/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%97%A8%E6%89%93%E6%95%A3%E5%B7%A5.html</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%97%A8%E6%89%93%E6%95%A3%E5%B7%A5.html</guid>
      <description>记录一次上门打散工 壬寅年头磨难多
人间规则奈吾何
吟诗为把瘟神送
风起大江扬洪波
疫情减弱，遍邀亲友，无人相约，但闻昔日挚友，感怀往事邀吾往之。欲把殷勤牵挂诉，幸之。遂至友舍，诉之：帮忙装个监控吧～
买物料 和朋友两个人出发，帮朋友邻居家装个监控，他这个监控是要求装在车库里，但是网线要从 4 楼下放下去。所以，我们首先要出门购买一下物料：
带 RJ45 接口监控 足够长的网线 走了 10000 多步人都走傻了～
布线 这个没啥好说的，纯粹体力活，感谢朋友的暴风之锤，提高了工作效率，加快了项目进度 感谢 感谢朋友，给我这次项目实践和锻炼的机会让我认识到了自己的能力的不足～
欢迎关注我的博客www.jobcher.com</description>
    </item>
    
    <item>
      <title>Ant中如何添加第三方jar包依赖</title>
      <link>https://www.jobcher.com/ant%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85%E4%BE%9D%E8%B5%96.html</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/ant%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85%E4%BE%9D%E8%B5%96.html</guid>
      <description>Ant 中如何添加第三方 jar 包依赖 如果使用 ant 进行 java 项目的编译部署，那怎么添加第三方 jar 包的依赖呢？方法如下：
在项目的根目录下创建 lib 目录，并把所有需要的第三方 jar 包放到此目录下。 在 build.xml 中依次添加：path、property，并在 javac 中添加 classpath，添加 unjar。完整配置如下： &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project name=&amp;#34;MyTool&amp;#34; default=&amp;#34;build&amp;#34; basedir=&amp;#34;.&amp;#34;&amp;gt; &amp;lt;description&amp;gt;The ant project to build MyTool.&amp;lt;/description&amp;gt; &amp;lt;property name=&amp;#34;srcDir&amp;#34; location=&amp;#34;src&amp;#34; description=&amp;#34;源文件的存放目录&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;libDir&amp;#34; location=&amp;#34;lib&amp;#34; description=&amp;#34;第三方jar包的存放目录&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;antDir&amp;#34; location=&amp;#34;ant&amp;#34; description=&amp;#34;编译后所有文件存放的根目录&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;binDir&amp;#34; location=&amp;#34;${antDir}/bin&amp;#34; description=&amp;#34;编译后class文件的存放目录&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;jarDir&amp;#34; location=&amp;#34;${antDir}/jar&amp;#34; description=&amp;#34;打包后jar包的存放目录&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;jarFile&amp;#34; location=&amp;#34;${jarDir}/MyTool.jar&amp;#34; description=&amp;#34;打包后jar包存放的完整路径&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;package&amp;#34; value=&amp;#34;com.xiboliya.mytool&amp;#34; description=&amp;#34;包名&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;mainClass&amp;#34; value=&amp;#34;MyTool&amp;#34; description=&amp;#34;主类名&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;resFromDir&amp;#34; location=&amp;#34;res&amp;#34; description=&amp;#34;资源文件的源目录&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;resToDir&amp;#34; location=&amp;#34;${binDir}/res&amp;#34; description=&amp;#34;资源文件的目标目录&amp;#34; /&amp;gt; &amp;lt;path id=&amp;#34;libPath&amp;#34; description=&amp;#34;编译时依赖的第三方jar包的存放路径&amp;#34;&amp;gt; &amp;lt;fileset dir=&amp;#34;${libDir}&amp;#34; erroronmissingdir=&amp;#34;false&amp;#34;&amp;gt; &amp;lt;include name=&amp;#34;*.</description>
    </item>
    
    <item>
      <title>linux 网络测速</title>
      <link>https://www.jobcher.com/linux-%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F.html</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/linux-%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F.html</guid>
      <description>linux 网络测速 一键测试脚本bench.sh 适用于各种 Linux 发行版的网络（下行）和 IO 测试：
显示当前测试的各种系统信息 取自世界多处的知名数据中心的测试点，下载测试比较全面 支持 IPv6 下载测速 IO 测试三次，并显示平均值 wget -qO- bench.sh | bash #或者下面这命令下载执行 curl -Lso- bench.sh | bash 欢迎关注我的博客www.jobcher.com</description>
    </item>
    
    <item>
      <title>网心云挂机教程 | 轻松实现睡后收入~</title>
      <link>https://www.jobcher.com/%E7%BD%91%E5%BF%83%E4%BA%91%E6%8C%82%E6%9C%BA%E6%95%99%E7%A8%8B-%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5~.html</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E7%BD%91%E5%BF%83%E4%BA%91%E6%8C%82%E6%9C%BA%E6%95%99%E7%A8%8B-%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5~.html</guid>
      <description>网心云挂机教程 | 轻松实现睡后收入~ 首先，本文章只是分享，造成一切的后果，博主概不负责！都是成年人了……
我采用 docker 容器魔方来挂载网心云
docker 部署 /mnt/money/wxedge_storage这个路径改为自己的存储路径建议&amp;gt;200G
docker run \ --name=wxedge \ --restart=always \ --privileged \ --net=host \ --tmpfs /run \ --tmpfs /tmp \ -v /mnt/money/wxedge_storage:/storage:rw \ -d \ registry.cn-hangzhou.aliyuncs.com/onething/wxedge 设备绑定 进入 dockerip 地址 （http://127.0.0.1:18888) 下载 app 扫码绑定 成功 然后坐等第二天收益到账就可以了，记得19:00-23:00是收益高峰期尽量保持在线~</description>
    </item>
    
    <item>
      <title>Proxmox VE 在线扩容磁盘分区</title>
      <link>https://www.jobcher.com/proxmox-ve-%E5%9C%A8%E7%BA%BF%E6%89%A9%E5%AE%B9%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.html</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/proxmox-ve-%E5%9C%A8%E7%BA%BF%E6%89%A9%E5%AE%B9%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.html</guid>
      <description>Proxmox VE 在线扩容磁盘分区 添加磁盘大小 在 VM 上做扩容操作 安装 growpart yum install -y epel-release yum install -y cloud-utils 查看系统盘 路径 fdisk -l df -h 扩容设备并重启 growpart /dev/sda 2 #2代表是第二块系统分区，不是sda2,中间有空格 reboot 重启执行命令 xfs_growfs /dev/sda2 #(xfs 文件系统) resize2fs /dev/sda2 #(ext4 文件系统) 更新完成 df -h </description>
    </item>
    
    <item>
      <title>centos7.9 网络配置</title>
      <link>https://www.jobcher.com/centos7.9-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/centos7.9-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html</guid>
      <description>centos7.9 网络配置 解决 centos 新机器网络不通的问题，CentOS7 默认不启动网卡的。CentOS 安装成功后,进行一下 ping 的操作,验证网络是否联通.
ping 1.1.1.1 ip addr # 查看ip网络名称 启用网卡 进入 /etc/sysconfig/network-scipts 文件夹下，找到 IP 网卡名称 cd /etc/sysconfig/network-scipts vim ifcfg-eth0 启用 ONBOOT #vim ifcfg-eth0 #修改 ONBOOT=YES # esc 并:wq退出保存 重启机器 shutdown -r now 结尾 centos 用的挺别扭，不考虑性能和性价比，我还是喜欢用 ubuntu……，简单的配置，初学者我建议还是先用 ubuntu，会少踩很多坑。当然了，用 x86 不然初学者用树莓派和 arm 设备，会碰到很多兼容性的问题。</description>
    </item>
    
    <item>
      <title>RocketMQ 安装和启动</title>
      <link>https://www.jobcher.com/rocketmq-%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8.html</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/rocketmq-%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8.html</guid>
      <description>RocketMQ 安装和部署 部署 RocketMQ
单机安装构建 安装 JDK 1.8.0 yum install java-1.8.0-openjdk* 安装 Maven wget http://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz tar -zxvf apache-maven-3.8.4-bin.tar.gz mv -f apache-maven-3.8.4 /usr/local/ vim /etc/profile # 末尾添加 export MAVEN_HOME=/usr/local/apache-maven-3.8.4 export PATH=${PATH}:${MAVEN_HOME}/bin # 保存 source /etc/profile # 查看maven是否正常 mvn -v 快速部署 #构建 DLedger git clone https://github.com/openmessaging/openmessaging-storage-dledger.git cd openmessaging-storage-dledger mvn clean install -DskipTests # 构建 RocketMQ git clone https://github.com/apache/rocketmq.git cd rocketmq git checkout -b store_with_dledger origin/store_with_dledger mvn -Prelease-all -DskipTests clean install -U # 部署 cd rocketmq/distribution/target/apache-rocketmq sh bin/dledger/fast-try.</description>
    </item>
    
    <item>
      <title>安装 minIO Azure S3网关</title>
      <link>https://www.jobcher.com/%E5%AE%89%E8%A3%85-minio-azure-s3%E7%BD%91%E5%85%B3.html</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E5%AE%89%E8%A3%85-minio-azure-s3%E7%BD%91%E5%85%B3.html</guid>
      <description>安装 minIO 通过 docker 安装 docker run -p 9000:9000 -p 41863:41863 -d --name azure-s3 \ -e &amp;#34;MINIO_ACCESS_KEY=azure存储账户&amp;#34; \ -e &amp;#34;MINIO_SECRET_KEY=azure存储密码&amp;#34; \ minio/minio gateway azure --console-address &amp;#34;:41863&amp;#34; 通过 docker-compose 安装 version: &amp;#34;3&amp;#34; services: minio: image: &amp;#34;minio/minio:RELEASE.2022-01-04T07-41-07Z.fips&amp;#34; container_name: &amp;#34;minio&amp;#34; restart: &amp;#34;always&amp;#34; volumes: - &amp;#34;/etc/localtime:/etc/localtime&amp;#34; ports: - &amp;#34;9000:9000&amp;#34; - &amp;#34;9001:9001&amp;#34; environment: - &amp;#34;MINIO_ROOT_USER=azure存储账户&amp;#34; - &amp;#34;MINIO_ROOT_PASSWORD=azure存储密码&amp;#34; command: - --console-address &amp;#34;:41863&amp;#34; </description>
    </item>
    
    <item>
      <title>logrotate 日志滚动的使用</title>
      <link>https://www.jobcher.com/logrotate-%E6%97%A5%E5%BF%97%E6%BB%9A%E5%8A%A8%E7%9A%84%E4%BD%BF%E7%94%A8.html</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/logrotate-%E6%97%A5%E5%BF%97%E6%BB%9A%E5%8A%A8%E7%9A%84%E4%BD%BF%E7%94%A8.html</guid>
      <description>logrotate 日志滚动的使用 logrotate 日志滚动切割工具，是 linux 默认安装的工具，配置文件位置：
/etc/logrotate.conf /etc/logrotate.d/ 参数 以 nginx 配置为例
/opt/log/nginx/*.log { daily missingok rotate 14 errors &amp;#34;nb@nbtyfood.com&amp;#34; compress delaycompress notifempty create 0640 www-data adm sharedscripts prerotate if [ -d /etc/logrotate.d/httpd-prerotate ]; then \ run-parts /etc/logrotate.d/httpd-prerotate; \ fi \ endscript postrotate invoke-rc.d nginx rotate &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 endscript } 参数 作用 compress 压缩日志文件的所有非当前版本 daily,weekly,monthly 按指定计划轮换日志文件 delaycompress 压缩所有版本，除了当前和下一个最近的 endscript 标记 prerotate 或 postrotate 脚本的结束 errors &amp;ldquo;emailid&amp;rdquo; 给指定邮箱发送错误通知 missingok 如果日志文件丢失，不要显示错误 notifempty 如果日志文件为空，则不轮换日志文件 olddir &amp;ldquo;dir&amp;rdquo; 指定日志文件的旧版本放在 “dir” 中 postrotate 引入一个在日志被轮换后执行的脚本 prerotate 引入一个在日志被轮换前执行的脚本 rotate &amp;rsquo;n&#39; 在轮换方案中包含日志的 n 个版本 sharedscripts 对于整个日志组只运行一次脚本 size=&amp;lsquo;logsize&amp;rsquo; 在日志大小大于 logsize（例如 100K，4M）时轮换 </description>
    </item>
    
    <item>
      <title>安装配置 Terraform</title>
      <link>https://www.jobcher.com/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-terraform.html</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-terraform.html</guid>
      <description>安装配置 Terraform 安装 macOS 苹果系统安装 #安装 brew tap hashicorp/tap brew install hashicorp/tap/terraform # 更新 brew update brew upgrade hashicorp/tap/terraform #验证安装 terraform -help windows 系统安装 #安装 choco install terraform #直接到这个url里下载64位系统 https://www.terraform.io/downloads #验证安装 terraform -help Linux 安装 curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - sudo apt-add-repository &amp;#34;deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main&amp;#34; sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install terraform #验证安装 terraform -help wget -O- https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo | sudo tee /etc/yum.repos.d/hashicorp.repo sudo yum install terraform -y terrafrom 控制 proxmox 虚拟机 来源：https://github.</description>
    </item>
    
    <item>
      <title>rsync 文件同步</title>
      <link>https://www.jobcher.com/rsync-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5.html</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/rsync-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5.html</guid>
      <description>rsync 文件同步 rsync 是一个常用的 Linux 应用程序，用于文件同步
安装 # Debian or Ubuntu $ sudo apt-get install rsync # Red Hat $ sudo yum install rsync # Arch Linux $ sudo pacman -S rsync 基本用法 使用 rsync 命令时，可以作为 cp 和 mv 命令的替代方法，将源目录同步到目标目录。
-r 表示递归，即包含子目录。注意，-r 是必须的，否则 rsync 运行不会成功。source 目录表示源目录，destination 表示目标目录。
-a 参数可以替代-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新
rsync -r source destination 远程同步
rsync -av &amp;lt;源地址&amp;gt;/ &amp;lt;用户名&amp;gt;@&amp;lt;ip地址&amp;gt;:/&amp;lt;目标地址&amp;gt; 友情地址：mysql 迁移 </description>
    </item>
    
    <item>
      <title>获取用户浏览器默认语言设置，自动判断跳转不同网站</title>
      <link>https://www.jobcher.com/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%A4%E6%96%AD%E8%B7%B3%E8%BD%AC%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99.html</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%A4%E6%96%AD%E8%B7%B3%E8%BD%AC%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99.html</guid>
      <description>自动判断跳转不同网站 根据用户目前的浏览器配置语言进行显示 供语言切换按钮，用户自定义选择不同的语言显示 根据识别用户的浏览器语言，自动判断并跳转到相应的语言网页，让你的网站更加灵动。
以下需要将代码放在 HTML 的内即可，然后自行制作多语言页面。
代码如下：
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; //获取用户语言的顺序是 //1.获取本地缓存里的内容 //2.用户浏览器的语言设置 //如果上面2个都没有获取到，就直接使用&amp;#39;en&amp;#39;作为用户选择的语言 var language = localStorage.getItem(&amp;#34;locale&amp;#34;) || window.navigator.language.toLowerCase() || &amp;#34;en&amp;#34;; //把用户的语言写入缓存，供下次获取使用 localStorage.setItem(&amp;#34;locale&amp;#34;, language); //判断用户的语言，跳转到不同的地方 if (language.indexOf(&amp;#34;zh-&amp;#34;) !== -1) { window.location = &amp;#34;/zh-cn/index.html&amp;#34;; } else if (language.indexOf(&amp;#34;en&amp;#34;) !== -1) { window.location = &amp;#34;/en/index.html&amp;#34;; } else { //其它的都使用英文 window.location = &amp;#34;/en/index.html&amp;#34;; } &amp;lt;/script&amp;gt; 核心代码
其实核心代码就是利用 navigator 的 language 属性
navigator.language 第二种解决方案 可以通过获取用户的 IP，然后把 IP 放到 IP 库里查询所在地，从而加载对应的资源，这样的方案回更加准确！有的第三方会直接返回所在国家的编码，比如 cn / en 等就更好了</description>
    </item>
    
    <item>
      <title>linux系统开启root权限</title>
      <link>https://www.jobcher.com/linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%90%AFroot%E6%9D%83%E9%99%90.html</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%90%AFroot%E6%9D%83%E9%99%90.html</guid>
      <description>linux 系统开启 root 权限 修改 ssh 服务配置文件 sudo su - sudo vim /etc/ssh/sshd_config 增加权限
在# Authentication: 下输入 PermitRootLogin yes 更改 root 密码，重启服务 sudo passwd root service sshd restart </description>
    </item>
    
    <item>
      <title>163企业邮箱设置教程</title>
      <link>https://www.jobcher.com/163%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E8%AE%BE%E7%BD%AE%E6%95%99%E7%A8%8B.html</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/163%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E8%AE%BE%E7%BD%AE%E6%95%99%E7%A8%8B.html</guid>
      <description>163 企业邮箱设置教程 请进入这个网站 https://qiye.163.com/help/l-11.html</description>
    </item>
    
    <item>
      <title>2021年第50周记</title>
      <link>https://www.jobcher.com/2021%E5%B9%B4%E7%AC%AC50%E5%91%A8%E8%AE%B0.html</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/2021%E5%B9%B4%E7%AC%AC50%E5%91%A8%E8%AE%B0.html</guid>
      <description>2021 年第 50 周周记 这周完成了以下任务
搭建 hugo 博客 使用 docker 封装了 blog 搭建 k3s 环境 计划：
学习 k8s 总结：没啥好总结，刚开始写周记，就随便写一点吧
欢迎关注我的博客www.jobcher.com</description>
    </item>
    
    <item>
      <title>自建服务器内网穿透</title>
      <link>https://www.jobcher.com/%E8%87%AA%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E8%87%AA%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</guid>
      <description>内网穿透 文章中使用的内网穿透前提是必须具有公网 IP 的云服务器，不符合条件的同学可以跳过了。
nps 内网穿透 nps 是一款轻量级、高性能、功能强大的内网穿透代理服务器。
在公网服务器上安装 nps sever 端 wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz tar -zxvf linux_amd64_server.tar.gz sudo ./nps install sudo nps start 在控制端安装 npc client 端 wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_client.tar.gz tar -zxvf linux_amd64_client.tar.gz sudo ./npc -server=ip:port -vkey=web界面中显示的密钥 sudo npc start npc 安装完成可以进入 web 页面穿透端口和域名
http://localhost:8080
frps 内网穿透 frps 相对于 nps 的劣势是有断流的风险
frps 相对于 nps 的优势是对于高流量的媒体服务能够提供更可靠的支持
安装 frps wget https://code.aliyun.com/MvsCode/frps-onekey/raw/master/install-frps.sh -O ./install-frps.sh chmod 700 ./install-frps.sh ./install-frps.sh install 卸载 frps 服务
./install-frps.sh uninstall 更新 frps 服务</description>
    </item>
    
    <item>
      <title>树莓派搭建k3s</title>
      <link>https://www.jobcher.com/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAk3s.html</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.jobcher.com/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAk3s.html</guid>
      <description>树莓派安装 k3s 1.安装 k3s 控制节点 curl -sfL https://get.k3s.io | sh - cat /var/lib/rancher/k3s/server/node-token 工作节点 curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh - 树莓派特别要注意一个坑，就是关于内存的问题这个之后再讲
k3s kubectl get nodes #显示正确的节点表示完成 卸载 k3s #server 节点 /usr/local/bin/k3s-uninstall.sh #agent 节点 /usr/local/bin/k3s-agent-uninstall.sh 2.安装 dashboard k3s 面板 部署 Kubernetes 仪表盘 GITHUB_URL=https://github.com/kubernetes/dashboard/releases VERSION_KUBE_DASHBOARD=$(curl -w &amp;#39;%{url_effective}&amp;#39; -I -L -s -S ${GITHUB_URL}/latest -o /dev/null | sed -e &amp;#39;s|.*/||&amp;#39;) sudo k3s kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/${VERSION_KUBE_DASHBOARD}/aio/deploy/recommended.yaml 仪表盘 RBAC 配置 创建以下资源清单文件：
dashboard.admin-user.yml
apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kubernetes-dashboard dashboard.</description>
    </item>
    
  </channel>
</rss>
